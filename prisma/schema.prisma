generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppAccessToken {
  id          Int      @id @default(autoincrement())
  accessToken String   @unique
  expiresAt   DateTime
}

// Represents logs when data is fetched.
// BroadcasterId MUST BE NULL IF fetchType is not equal to Stream
model FetchLog {
  fetchId       String     @id
  userId        String
  fetchedAt     DateTime
  fetchType     String
  user          User       @relation(fields: [userId], references: [userId])
  channel       Channel?   @relation(fields: [broadcasterId], references: [broadcasterId])
  broadcasterId String?
  eventSub      EventSub[]
  Stream        Stream[]
}

// utilisateur sur le site qui fait la demande ? Date de demande, le fetch, et lié à la reposne pour savoir qui que quoi
model EventSub {
  id            Int                    @id @default(autoincrement())
  userId        String
  fetchId       String
  user          User                   @relation(fields: [userId], references: [userId])
  fetch         FetchLog               @relation(fields: [fetchId], references: [fetchId])
  subscriptions SubscriptionEventSub[]
}

// Reponse après demande de webhook à twitch -> Soda / Enable / cout 1 ...
model Subscription {
  id               String                 @id
  status           String
  subscriptionType String
  broadcasterId    String
  createdAt        DateTime
  cost             Int
  eventSubs        SubscriptionEventSub[]
  channel          Channel                @relation(fields: [broadcasterId], references: [broadcasterId])
  event            Event[]
}

model SubscriptionEventSub {
  eventSubId     Int
  subscriptionId String
  eventSub       EventSub     @relation(fields: [eventSubId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@id([eventSubId, subscriptionId])
}

/// Webhook recu -> xxx est entrain de streamer à 12h jusque 15h (début/fin)
model Event {
  id              Int          @id @default(autoincrement())
  externalEventId String?
  broadcasterId   String
  eventType       String
  startedAt       DateTime
  endAt           DateTime?
  subscriptionId  String
  channel         Channel      @relation(fields: [broadcasterId], references: [broadcasterId])
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

model User {
  userId           String                 @id
  userLogin        String                 @unique
  displayName      String
  email            String
  profileImageUrl  String
  createdAt        DateTime
  followedChannels UserFollowedChannels[]
  eventSub         EventSub[]
  fetchLog         FetchLog[]
  downloadSchedule DownloadSchedule[]
  VideoRequest     VideoRequest[]
}

model Channel {
  broadcasterId    String                 @id
  broadcasterLogin String                 @unique
  broadcasterName  String
  displayName      String
  broadcasterType  String
  createdAt        DateTime
  description      String                 @db.VarChar(500)
  offlineImageUrl  String
  profileImageUrl  String
  profilePicture   String
  type             String?
  viewCount        Int                    @default(0)
  usersFollowing   UserFollowedChannels[]
  video            Video[]
  stream           Stream[]
  subscription     Subscription[]
  event            Event[]
  downloadSchedule DownloadSchedule[]
  FetchLog         FetchLog[]
}

model UserFollowedChannels {
  userId        String
  broadcasterId String
  followedAt    DateTime
  followed      Boolean
  user          User     @relation(fields: [userId], references: [userId])
  channel       Channel  @relation(fields: [broadcasterId], references: [broadcasterId])

  @@id([broadcasterId, userId])
}

model Job {
  id     String  @id
  status Status
  Video  Video[]
}

enum Status {
  PENDING
  RUNNING
  DONE
  FAILED
}

model Log {
  id            Int      @id @default(autoincrement())
  downloadUrl   String
  filename      String
  lastWriteTime DateTime
  type          String
}

model Task {
  id            String   @id
  name          String
  description   String
  taskType      String
  interval      Int      @default(0)
  lastDuration  Int      @default(0)
  lastExecution DateTime
  nextExecution DateTime
  metadata      String?
}

model Video {
  id              Int             @id @default(autoincrement())
  filename        String          @unique
  status          Status
  displayName     String
  startDownloadAt DateTime        @default(now())
  downloadedAt    DateTime?
  viewerCount     Int             @default(0)
  language        String
  quality         Quality
  duration        Float?
  size            Float?
  thumbnail       String?
  channel         Channel         @relation(fields: [broadcasterId], references: [broadcasterId])
  broadcasterId   String
  job             Job             @relation(fields: [jobId], references: [id])
  jobId           String          @unique
  stream          Stream          @relation(fields: [streamId], references: [id])
  streamId        String
  tags            VideoTag[]
  titles          VideoTitle[]
  videoCategory   VideoCategory[]
  VideoRequest    VideoRequest[]
}

model VideoRequest {
  videoId Int
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  user    User   @relation(fields: [userId], references: [userId])

  @@id([videoId, userId])
}

enum Quality {
  LOW
  MEDIUM
  HIGH
}

model Category {
  id                       String                     @id
  boxArtUrl                String
  igdbId                   String?
  name                     String
  videoCategory            VideoCategory[]
  streamCategory           StreamCategory[]
  downloadScheduleCategory DownloadScheduleCategory[]
}

model VideoCategory {
  videoId    Int
  categoryId String
  video      Video    @relation(fields: [videoId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([videoId, categoryId])
}

model StreamCategory {
  streamId   String
  categoryId String
  stream     Stream   @relation(fields: [streamId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([streamId, categoryId])
}

model DownloadScheduleCategory {
  downloadScheduleId Int
  categoryId         String
  downloadSchedule   DownloadSchedule @relation(fields: [downloadScheduleId], references: [id])
  category           Category         @relation(fields: [categoryId], references: [id])

  @@id([downloadScheduleId, categoryId])
}

model Tag {
  name                String                @id
  videoTag            VideoTag[]
  streamTag           StreamTag[]
  downloadScheduleTag DownloadScheduleTag[]
}

model VideoTag {
  videoId Int
  tagId   String
  video   Video  @relation(fields: [videoId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [name])

  @@id([videoId, tagId])
}

model StreamTag {
  streamId String
  tagId    String
  stream   Stream @relation(fields: [streamId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [name])

  @@id([streamId, tagId])
}

model DownloadScheduleTag {
  downloadScheduleId Int
  tagId              String
  downloadSchedule   DownloadSchedule @relation(fields: [downloadScheduleId], references: [id])
  tag                Tag              @relation(fields: [tagId], references: [name])

  @@id([downloadScheduleId, tagId])
}

model Stream {
  id            String           @id
  isMature      Boolean?
  language      String
  startedAt     DateTime
  thumbnailUrl  String
  type          String
  broadcasterId String
  viewerCount   Int              @default(0)
  channel       Channel          @relation(fields: [broadcasterId], references: [broadcasterId])
  fetchLog      FetchLog         @relation(fields: [fetchId], references: [fetchId])
  fetchId       String
  tags          StreamTag[]
  videos        Video[]
  categories    StreamCategory[]
  titles        StreamTitle[]
}

model Title {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  VideoTitle  VideoTitle[]
  StreamTitle StreamTitle[]
}

model VideoTitle {
  videoId Int
  titleId String
  video   Video  @relation(fields: [videoId], references: [id])
  title   Title  @relation(fields: [titleId], references: [name])

  @@id([videoId, titleId])
}

model StreamTitle {
  streamId String
  titleId  String
  stream   Stream @relation(fields: [streamId], references: [id])
  title    Title  @relation(fields: [titleId], references: [name])

  @@id([streamId, titleId])
}

model DownloadSchedule {
  id                       Int                        @id @default(autoincrement())
  provider                 Provider
  broadcasterId            String?
  viewersCount             Int?
  timeBeforeDelete         DateTime?
  trigger                  Trigger
  quality                  Quality
  isDeleteRediff           Boolean
  requestedBy              String
  channel                  Channel?                   @relation(fields: [broadcasterId], references: [broadcasterId])
  user                     User                       @relation(fields: [requestedBy], references: [userId])
  downloadScheduleTag      DownloadScheduleTag[]
  downloadScheduleCategory DownloadScheduleCategory[]
}

enum Provider {
  SINGLE_CHANNEL
  FOLLOWED_CHANNEL
}

enum Trigger {
  CATEGORY
  TAG
  MINIMUM_VIEW
  ONLINE
}
